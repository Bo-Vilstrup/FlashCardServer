#!/usr/bin/env node
'use strict';

var configCloudEnv = require('cloud-env');

var mongoose = require('mongoose');
//mongoose.Promise = global.Promise; // removes warning about promises

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('ProjectFlashCardServerSeed2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

    
var port = configCloudEnv.get('PORT', 3000);
var ip = configCloudEnv.get('IP','127.0.0.1');
//var port = configCloudEnv.PORT;
//var ip = configCloudEnv.IP;
app.set('port', port);
app.set('ip', ip);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


var localDataBase = '/cs5610';
var connection_string = configCloudEnv.MONGODB_DB_URL + configCloudEnv.get('APP_NAME', localDataBase);

// Connect to mongodb
var connect = function () {
  mongoose.connect(connection_string);
  console.log("connected to database: " + connection_string);
};
connect();

var db = mongoose.connection;

db.on('error', function(error){
  console.log("Error loading the db - "+ error);
});

db.on('disconnected', connect);





server.listen(app.get("port"),app.get("ip"));
server.on('error', onError);
server.on('listening', onListening);



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
